<?php

/**
 * @file
 * Test the access handler.
 */

/**
 * Test the access handler.
 */
class AdminViewsAccessHandlerTestCase extends AdminViewsBaseTestCase {

  /**
   * Define this test class.
   *
   * @return array
   *   The test's meta data.
   */
  public static function getInfo() {
    return array(
      'name' => 'Access handler',
      'description' => 'Tests views_plugin_access_menu handler.',
      'group' => 'Administration views',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp(array $modules = array()) {
    $modules[] = 'node';
    parent::setUp($modules);
  }

  /**
   * Tests access handler via views/ajax.
   */
  public function testAjaxAccess() {
    $params = array(
      'view_name' => 'admin_views_user',
      'view_display_id' => 'system_1',
    );
    $response_data = $this->drupalGetAJAX('views/ajax', array('query' => $params));

    $this->assertResponse(200);
    // Check no views settings are returned.
    $this->assertTrue(empty($response_data[0]['settings']['views']));
    // The next item in the AJAX data will be the insert command containing the
    // rendered view.
    $this->assertTrue(empty($response_data[1]));

    // Test the access again with the default display.
    $params['views_display_id'] = 'default';

    $response_data = $this->drupalGetAJAX('views/ajax', array('query' => $params));

    $this->assertResponse(200);
    // Check no views settings are returned.
    $this->assertTrue(empty($response_data[0]['settings']['views']));
    // The next item in the AJAX data will be the insert command containing the
    // rendered view.
    $this->assertTrue(empty($response_data[1]));
  }

}
